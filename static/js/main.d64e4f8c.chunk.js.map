{"version":3,"sources":["serviceWorker.js","NavBar/NavBar.js","Autocomplete/Autocomplete.js","Home/Home.js","Favorites/Favorites.js","App.js","NotFound/NotFound.js","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","props","componentToShow","e","value","setState","componentName","switchComponent","state","className","onClick","React","Component","Autocomplete","suggestion","bind","ApiKey","locationsUrl","currentCity","weeklyWeather","showing","self","this","axios","get","target","then","response","undefined","data","catch","error","console","log","finally","Key","onSelectCity","role","placeholder","onKeyUpCapture","map","item","key","onSelected","LocalizedName","handleAccuweather","weatherForecastUrl","cityName","DailyForecasts","headline","Headline","Text","addToFavorites","localStorage","setItem","daysOfWeek","length","Temperature","Minimum","Value","id","Maximum","Favorites","favoritesCities","citiesToShow","values","keys","Object","i","push","getItem","entries","allStorage","forEach","city","locationData","WeatherText","Metric","App","onSwitchComponent","componentToRender","NotFound","routing","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d64e4f8c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport './NavBar.css';\r\n \r\nexport default class NavBar extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {componentName:'Home'};\r\n  }\r\n\r\n  componentToShow = (e, value)=>{\r\n    this.setState({componentName:value});\r\n    this.props.switchComponent(value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className='navBar'>\r\n          <div className=\"title\"> Herolo Weather Task </div>\r\n          <div className=\"nav-buttons\">\r\n            <div className=\"link\" onClick={(e) =>  this.componentToShow(e, 'Home')}>Home</div>\r\n            <div className=\"link\" onClick={(e) => this.componentToShow(e, 'Favorites')}>Favorites</div>\r\n          </div>\r\n        </div>\r\n    )\r\n  } \r\n}\r\n","import React from 'react'\r\nimport './Autocomplete.css';\r\nimport axios from 'axios';\r\n\r\nexport default class Autocomplete extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.suggestion = this.suggestion.bind(this);\r\n    this.ApiKey = 's1501FHB0B7WamEnzbjC3cLSRugkTyKx';\r\n    this.locationsUrl = 'http://dataservice.accuweather.com/locations/v1/cities/autocomplete?apikey=' + this.ApiKey + '&q';  \r\n    this.state = {currentCity : [], weeklyWeather:[], showing: true};\r\n  }\r\n\r\n   suggestion(e){\r\n          var self = this;\r\n          axios.get(this.locationsUrl + '='+ e.target.value)\r\n              .then(function (response) {\r\n                if(response !== undefined && response.data[0] !== undefined){\r\n                self.setState({currentCity : response.data});\r\n                self.setState({ showing: true });\r\n                }\r\n              })\r\n              .catch(function (error) {\r\n                // handle error\r\n                console.log(error);\r\n              })\r\n              .finally(function () {\r\n                // always executed\r\n              })      \r\n  }\r\n\r\n  onSelected(e, Key){\r\n    this.setState({ showing: !this.state.showing });\r\n    this.props.onSelectCity(e, Key);\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    return (\r\n        <div className='autocomplete'>  \r\n        <div className=\"magnifying-glass\"><span role=\"img\">🔍</span></div>\r\n           <input placeholder='City' onKeyUpCapture={this.suggestion.bind(this)}   />\r\n           <div className=\"cities\">\r\n\r\n          { (this.state.showing) ? \r\n          <div>\r\n            {this.state.currentCity.map(item => (\r\n              <div className=\"city-name\" key={item.Key} \r\n                onClick={ (e) =>  this.onSelected(e, item)}\r\n              >\r\n                {item.LocalizedName}\r\n              </div>\r\n            ))}\r\n          </div>\r\n            : null\r\n          }\r\n        </div>\r\n      </div>\r\n    )\r\n  } \r\n}\r\n","import React from 'react'\r\nimport './Home.css';\r\nimport Autocomplete from '../Autocomplete/Autocomplete';\r\nimport axios from 'axios';\r\n\r\nexport default class NavBar extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.ApiKey = 's1501FHB0B7WamEnzbjC3cLSRugkTyKx';\r\n    this.weatherForecastUrl = 'http://dataservice.accuweather.com/forecasts/v1/daily/5day/';\r\n    this.daysOfWeek = ['Sun','Mon','Tue','Wed','Thu'];\r\n    this.state = {weeklyWeather:[], cityName:'', headline: '',location:{}};\r\n  }\r\n\r\n  handleAccuweather = (e, location) => {\r\n      var self = this;\r\n            axios.get(self.weatherForecastUrl + location.Key + \r\n                      '?apikey=' + self.ApiKey + '&details=false&metric=true')\r\n               .then(function (response) {\r\n                 // handle success\r\n                 self.setState({location: location});\r\n                 self.setState({cityName : location.LocalizedName});\r\n                 self.setState({weeklyWeather : response.data.DailyForecasts});\r\n                 self.setState({headline : response.data.Headline.Text});\r\n               })      \r\n  }\r\n\r\n  addToFavorites = ()=> {\r\n    localStorage.setItem(this.state.location.LocalizedName, this.state.location.Key);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='home'>\r\n        <div className='home-autocomplete'>\r\n          <Autocomplete onSelectCity={this.handleAccuweather}/>\r\n        </div>\r\n        <div className=\"accuweatherWeekly\">\r\n              { (this.state.weeklyWeather.length>0) ?\r\n              <div className='weekly-weather'>\r\n              <div className=\"selected-city-box\">\r\n                <div className=\"city-header left\">\r\n                  <div className='inner-box'> \r\n                    <div className=\"selected-city-button\">☒</div>\r\n                    <div className='selected-city'> \r\n                      <h4>{this.state.cityName}</h4>\r\n                      <h4>{this.state.weeklyWeather[0].Temperature.Minimum.Value}°c</h4>\r\n                    </div>\r\n                   </div>\r\n                  </div>\r\n                  <div className=\"city-header right\">\r\n                    <div className='inner-box'> \r\n                      <span>♡</span> \r\n                      <span onClick={this.addToFavorites}>Add to Favorites</span>\r\n                    </div>\r\n                  </div>\r\n              </div>\r\n                 <h2>{this.state.headline}</h2>\r\n                  {this.state.weeklyWeather.map((item, id) => (\r\n                    <div className=\"daily-weather\" key={id} >\r\n                        <h3>{ this.daysOfWeek[id]}</h3>   \r\n                          Minimum:{item.Temperature.Minimum.Value}°c    \r\n                          Maximum:{item.Temperature.Maximum.Value}°c\r\n                  </div>\r\n                ))}\r\n              </div>:null\r\n            }\r\n          </div>\r\n      </div>\r\n    )\r\n  } \r\n}\r\n","import React from 'react'\r\nimport './Favorites.css';\r\nimport axios from 'axios';\r\n\r\nexport default class Favorites extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {favoritesCities:[[]], citiesToShow:[]};\r\n    this.ApiKey = 's1501FHB0B7WamEnzbjC3cLSRugkTyKx';\r\n    this.weatherForecastUrl = 'http://dataservice.accuweather.com/currentconditions/v1/';\r\n\r\n  }\r\n\r\n   allStorage() {\r\n    var values = [],\r\n        keys = Object.keys(localStorage),\r\n        i = keys.length;\r\n\r\n    while ( i-- ) {\r\n        values.push( localStorage.getItem(keys[i]) );\r\n    }\r\n    return values;\r\n  }\r\n\r\n   componentDidMount(){\r\n    this.setState({'favoritesCities': Object.entries(localStorage)});\r\n    var self = this;\r\n    var favoritesCitiesKey = this.allStorage();\r\n    favoritesCitiesKey.forEach(city => {\r\n      axios.get(self.weatherForecastUrl + city+'?apikey=' + self.ApiKey)\r\n          .then(function (response) {\r\n            // var cities = self.state('citiesToShow');\r\n            var locationData = self.state.citiesToShow;\r\n            locationData.push(response.data[0])    \r\n            self.setState({citiesToShow: locationData});\r\n\r\n          }) \r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className='favorites'>  \r\n                {this.state.citiesToShow.map((city, id) => (\r\n                    <div className=\"daily-weather\" key={id} >\r\n                        <h3>{this.state.favoritesCities[id][0]}</h3>   \r\n                         <div> {city.WeatherText} </div>    \r\n                         <div> {city.Temperature.Metric.Value}°c</div>   \r\n                  </div>\r\n                ))}\r\n        </div>\r\n    )\r\n  } \r\n}\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from './NavBar/NavBar';\nimport Home from './Home/Home'\nimport Favorites from './Favorites/Favorites'\n\nexport default class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {componentToRender: 'Home'}\n  }\n\n  onSwitchComponent = (value)=>{\n    this.setState({componentToRender:value});\n  }\n\n  render() {\n\n    return (\n      <div className=\"app\">\n        <header className=\"app-header\">\n          <NavBar switchComponent={this.onSwitchComponent}/>\n        </header>\n        <div className=\"app-body\">\n         {(this.state.componentToRender === 'Home')?\n            <Home /> : \n            <Favorites />\n         } \n        </div>\n      \n      </div>\n    );\n  } \n}\n","import React from 'react'\r\nimport './NotFound.css';\r\n\r\nexport default class NotFound extends React.Component{\r\n  render() {\r\n    return (\r\n        <div className='NotFound'>\r\n          <h1>-Page Not Found-</h1>\r\n        </div>\r\n    )\r\n  } \r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\n// COMPONENT\nimport App from './App';\nimport Favorites from './Favorites/Favorites';\nimport NotFound from './NotFound/NotFound';\n\nconst routing = (\n    <Router>\n        <Switch>\n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/Favorites\" component={Favorites} />\n            <Route component={NotFound} />\n        </Switch>\n    </Router>\n  )\nReactDOM.render(routing, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}